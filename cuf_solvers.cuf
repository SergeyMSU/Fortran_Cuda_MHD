attributes(global) subroutine CUF_MGD_grans(now)
    use MY_CUDA
    implicit none
	integer, intent(in) :: now
    integer(4) :: now2, KOBL, idgod, n_disc, gr, metod, s1, s2, ss1, ss2, kdir, type, i
    real(8) :: time, dist, wc, dsl, dsp, dsc, aa, bb, cc, the
    real(8) :: POTOK(dev_num_param), distant(3), Gran_normal(3), square, rast(3)
    real(8) :: qqq1(dev_num_param), qqq2(dev_num_param), qqq11(dev_num_param), qqq22(dev_num_param)
    real(8) :: qqq1_TVD(dev_num_param), qqq2_TVD(dev_num_param)
    real(8) :: df1, df2, dff1, dff2, rad1, rad2, rad3, rad4, rad5
    logical :: tvd 

    tvd = .TRUE.
    now2 = mod(now, 2) + 1

	KOBL = 0
	kdir = 0
	idgod = 0
	n_disc = 0!! 1
	time = 100000.0
	gr = blockDim%x * (blockIdx%x - 1) + threadIdx%x   ! Номер потока

    if (gr > dev_N_gran) return

    type = dev_Gran_type(gr)

    if(type == 2) return

    metod = 3

    POTOK = 0.0
	s1 = dev_Gran_neighbour(1, gr)
	s2 = dev_Gran_neighbour(2, gr)

    distant = dev_Gran_center(:, gr) - dev_Cell_center(:, s1)
	dist = dev_norm2(distant)

    if(s1 < 1) then
        print*, "s1 < 1"
        STOP
    end if

    qqq1 = dev_Cell_par(:, s1)

    if(qqq1(1) < 0.00000001) then
        print*, "ERROR 9iu3498h34fh", qqq1(1), s1
        STOP
    end if

    if(type == 3) then
        qqq2 = qqq1
        tvd = .FALSE.
    else
        qqq2 = dev_Cell_par(:, s2)
    end if

    Gran_normal = dev_Gran_normal(:, gr)
    square = dev_Gran_square(gr)

    tvd = .FALSE.
    ! Делаем TVD и всякие сносы
    if(tvd == .TRUE.) then
        ss1 = dev_Gran_neighbour_TVD(1, gr)
	    ss2 = dev_Gran_neighbour_TVD(2, gr)
        rad5 = dev_norm2(dev_Gran_center(:, gr))

        if(ss1 > dev_N_cell .or. ss2 > dev_N_cell) then
            write(*, *) "ERROR"
            STOP
        end if

        if(ss1 > 0 .and. ss2 > 0 .and. type == 1) then
            rast = dev_Gran_center(:, gr) - dev_Cell_center(:, s1)
            df1 = dev_norm2(rast)
            rast = dev_Gran_center(:, gr) - dev_Cell_center(:, s2)
            df2 = dev_norm2(rast)
            rast = dev_Gran_center(:, gr) - dev_Cell_center(:, ss1)
            dff1 = dev_norm2(rast)
            rast = dev_Gran_center(:, gr) - dev_Cell_center(:, ss1)
            dff2 = dev_norm2(rast)
            qqq11 = dev_Cell_par(1:dev_num_param, ss1)
            qqq22 = dev_Cell_par(1:dev_num_param, ss2)

            rad1 = dev_norm2(dev_Cell_center(:, s1))                              
            rad2 = dev_norm2(dev_Cell_center(:, s2))                              
            rad3 = dev_norm2(dev_Cell_center(:, ss1))                              
            rad4 = dev_norm2(dev_Cell_center(:, ss2)) 
            
            qqq1_TVD(1) = linear(-dff1, qqq11(1) * rad3**2, -df1, qqq1(1) * rad1**2, df2, qqq2(1) * rad2**2, 0.0_8)/ rad5**2
            qqq1_TVD(5) = linear(-dff1, qqq11(5) * rad3**(2 * ggg), -df1, qqq1(5) * rad1**(2 * ggg), df2,&
                qqq2(5) * rad2**(2 * ggg), 0.0_8)/ rad5**(2 * ggg)
            
            qqq2_TVD(1) = linear(-dff2, qqq22(1) * rad4**2, -df2, qqq2(1) * rad2**2, df1, qqq1(1) * rad1**2, 0.0_8)/ rad5**2
            qqq2_TVD(5) = linear(-dff2, qqq22(5) * rad4**(2 * ggg), -df2, qqq2(5) * rad2**(2 * ggg), df1,&
                qqq1(5) * rad1**(2 * ggg), 0.0_8)/ rad5**(2 * ggg)

            the = acos(dev_Gran_center(3, gr) / rad5);
            
            if(the > par_pi_8/9 .and. the < 8 * par_pi_8 / 9) then
                ! Переводим скорости в сферическую с.к.
                call spherical_skorost(dev_Cell_center(3, s1), dev_Cell_center(1, s1), dev_Cell_center(2, s1), &
                    qqq1(4), qqq1(2), qqq1(3), aa, bb, cc)
                qqq1(2) = aa
                qqq1(3) = bb
                qqq1(4) = cc
                
                call spherical_skorost(dev_Cell_center(3, s2), dev_Cell_center(1, s2), dev_Cell_center(2, s2), &
                    qqq2(4), qqq2(2), qqq2(3), aa, bb, cc)
                qqq2(2) = aa
                qqq2(3) = bb
                qqq2(4) = cc
                
                call spherical_skorost(dev_Cell_center(3, ss1), dev_Cell_center(1, ss1), dev_Cell_center(2, ss1), &
                    qqq11(4), qqq11(2), qqq11(3), aa, bb, cc)
                qqq11(2) = aa
                qqq11(3) = bb
                qqq11(4) = cc
                
                call spherical_skorost(dev_Cell_center(3, ss2), dev_Cell_center(1, ss2), dev_Cell_center(2, ss2), &
                    qqq22(4), qqq22(2), qqq22(3), aa, bb, cc)
                qqq22(2) = aa
                qqq22(3) = bb
                qqq22(4) = cc
                
                ! Перевод Магнитных полей в сферическую ск
                
                call spherical_skorost(dev_Cell_center(3, s1), dev_Cell_center(1, s1), dev_Cell_center(2, s1), &
                    qqq1(8), qqq1(6), qqq1(7), aa, bb, cc)
                qqq1(6) = aa
                qqq1(7) = bb
                qqq1(8) = cc
                
                call spherical_skorost(dev_Cell_center(3, s2), dev_Cell_center(1, s2), dev_Cell_center(2, s2), &
                    qqq2(8), qqq2(6), qqq2(7), aa, bb, cc)
                qqq2(6) = aa
                qqq2(7) = bb
                qqq2(8) = cc
                
                call spherical_skorost(dev_Cell_center(3, ss1), dev_Cell_center(1, ss1), dev_Cell_center(2, ss1), &
                    qqq11(8), qqq11(6), qqq11(7), aa, bb, cc)
                qqq11(6) = aa
                qqq11(7) = bb
                qqq11(8) = cc
                
                call spherical_skorost(dev_Cell_center(3, ss2), dev_Cell_center(1, ss2), dev_Cell_center(2, ss2), &
                    qqq22(8), qqq22(6), qqq22(7), aa, bb, cc)
                qqq22(6) = aa
                qqq22(7) = bb
                qqq22(8) = cc
                
                do i = 2, 4
                    qqq1_TVD(i) = linear(-dff1, qqq11(i), -df1, qqq1(i), df2, qqq2(i), 0.0_8)
                    qqq2_TVD(i) = linear(-dff2, qqq22(i), -df2, qqq2(i), df1, qqq1(i), 0.0_8)
                end do
                
                do i = 6, 8
                    qqq1_TVD(i) = linear(-dff1, qqq11(i), -df1, qqq1(i), df2, qqq2(i), 0.0_8)
                    qqq2_TVD(i) = linear(-dff2, qqq22(i), -df2, qqq2(i), df1, qqq1(i), 0.0_8)
                end do
                
                call dekard_skorost(dev_Gran_center(3, gr), dev_Gran_center(1, gr), dev_Gran_center(2, gr), &
                    qqq1_TVD(2), qqq1_TVD(3), qqq1_TVD(4), aa, bb, cc)
                qqq1_TVD(4) = aa
                qqq1_TVD(2) = bb
                qqq1_TVD(3) = cc
                call dekard_skorost(dev_Gran_center(3, gr), dev_Gran_center(1, gr), dev_Gran_center(2, gr), &
                    qqq2_TVD(2), qqq2_TVD(3), qqq2_TVD(4), aa, bb, cc)
                qqq2_TVD(4) = aa
                qqq2_TVD(2) = bb
                qqq2_TVD(3) = cc
                
                call dekard_skorost(dev_Gran_center(3, gr), dev_Gran_center(1, gr), dev_Gran_center(2, gr), &
                    qqq1_TVD(6), qqq1_TVD(7), qqq1_TVD(8), aa, bb, cc)
                qqq1_TVD(8) = aa
                qqq1_TVD(6) = bb
                qqq1_TVD(7) = cc
                call dekard_skorost(dev_Gran_center(3, gr), dev_Gran_center(1, gr), dev_Gran_center(2, gr), &
                    qqq2_TVD(6), qqq2_TVD(7), qqq2_TVD(8), aa, bb, cc)
                qqq2_TVD(8) = aa
                qqq2_TVD(6) = bb
                qqq2_TVD(7) = cc
            else
                ! Переводим скорости в сферическую с.к.
                call spherical_skorost(dev_Cell_center(1, s1), dev_Cell_center(2, s1), dev_Cell_center(3, s1), &
                    qqq1(2), qqq1(3), qqq1(4), aa, bb, cc)
                qqq1(2) = aa
                qqq1(3) = bb
                qqq1(4) = cc
                
                call spherical_skorost(dev_Cell_center(1, s2), dev_Cell_center(2, s2), dev_Cell_center(3, s2), &
                    qqq2(2), qqq2(3), qqq2(4), aa, bb, cc)
                qqq2(2) = aa
                qqq2(3) = bb
                qqq2(4) = cc
                
                call spherical_skorost(dev_Cell_center(1, ss1), dev_Cell_center(2, ss1), dev_Cell_center(3, ss1), &
                    qqq11(2), qqq11(3), qqq11(4), aa, bb, cc)
                qqq11(2) = aa
                qqq11(3) = bb
                qqq11(4) = cc
                
                call spherical_skorost(dev_Cell_center(1, ss2), dev_Cell_center(2, ss2), dev_Cell_center(3, ss2), &
                    qqq22(2), qqq22(3), qqq22(4), aa, bb, cc)
                qqq22(2) = aa
                qqq22(3) = bb
                qqq22(4) = cc
                
                ! Перевод Магнитных полей в сферическую ск
                
                call spherical_skorost(dev_Cell_center(1, s1), dev_Cell_center(2, s1), dev_Cell_center(3, s1), &
                    qqq1(6), qqq1(7), qqq1(8), aa, bb, cc)
                qqq1(6) = aa
                qqq1(7) = bb
                qqq1(8) = cc
                
                call spherical_skorost(dev_Cell_center(1, s2), dev_Cell_center(2, s2), dev_Cell_center(3, s2), &
                    qqq2(6), qqq2(7), qqq2(8), aa, bb, cc)
                qqq2(6) = aa
                qqq2(7) = bb
                qqq2(8) = cc
                
                call spherical_skorost(dev_Cell_center(1, ss1), dev_Cell_center(2, ss1), dev_Cell_center(3, ss1), &
                    qqq11(6), qqq11(7), qqq11(8), aa, bb, cc)
                qqq11(6) = aa
                qqq11(7) = bb
                qqq11(8) = cc
                
                call spherical_skorost(dev_Cell_center(1, ss2), dev_Cell_center(2, ss2), dev_Cell_center(3, ss2), &
                    qqq22(6), qqq22(7), qqq22(8), aa, bb, cc)
                qqq22(6) = aa
                qqq22(7) = bb
                qqq22(8) = cc
                
                do i = 2, 4
                    qqq1_TVD(i) = linear(-dff1, qqq11(i), -df1, qqq1(i), df2, qqq2(i), 0.0_8)
                    qqq2_TVD(i) = linear(-dff2, qqq22(i), -df2, qqq2(i), df1, qqq1(i), 0.0_8)
                end do
                
                do i = 6, 8
                    qqq1_TVD(i) = linear(-dff1, qqq11(i), -df1, qqq1(i), df2, qqq2(i), 0.0_8)
                    qqq2_TVD(i) = linear(-dff2, qqq22(i), -df2, qqq2(i), df1, qqq1(i), 0.0_8)
                end do
                
                call dekard_skorost(dev_Gran_center(1, gr), dev_Gran_center(2, gr), dev_Gran_center(3, gr), &
                    qqq1_TVD(2), qqq1_TVD(3), qqq1_TVD(4), aa, bb, cc)
                qqq1_TVD(2) = aa
                qqq1_TVD(3) = bb
                qqq1_TVD(4) = cc
                call dekard_skorost(dev_Gran_center(1, gr), dev_Gran_center(2, gr), dev_Gran_center(3, gr), &
                    qqq2_TVD(2), qqq2_TVD(3), qqq2_TVD(4), aa, bb, cc)
                qqq2_TVD(2) = aa
                qqq2_TVD(3) = bb
                qqq2_TVD(4) = cc
                
                call dekard_skorost(dev_Gran_center(1, gr), dev_Gran_center(2, gr), dev_Gran_center(3, gr), &
                    qqq1_TVD(6), qqq1_TVD(7), qqq1_TVD(8), aa, bb, cc)
                qqq1_TVD(6) = aa
                qqq1_TVD(7) = bb
                qqq1_TVD(8) = cc
                call dekard_skorost(dev_Gran_center(1, gr), dev_Gran_center(2, gr), dev_Gran_center(3, gr), &
                    qqq2_TVD(6), qqq2_TVD(7), qqq2_TVD(8), aa, bb, cc)
                qqq2_TVD(6) = aa
                qqq2_TVD(7) = bb
                qqq2_TVD(8) = cc
            end if
        
            qqq1 = qqq1_TVD
            qqq2 = qqq2_TVD
        else
            rad1 = dev_norm2(dev_Cell_center(:, s1))
            rad2 = dev_norm2(dev_Gran_center(:, gr))
            qqq1(1) = qqq1(1) * rad1**2 / rad2**2
            qqq1(5) = qqq1(5) * rad1**(2 * ggg) / rad2**(2 * ggg)

            the = acos(dev_Gran_center(3, gr) / rad5);

            if(the > par_pi_8/9 .and. the < 8 * par_pi_8 / 9) then
                ! Скорости сносим в сферической С.К.
                call spherical_skorost(dev_Cell_center(3, s1), dev_Cell_center(1, s1), dev_Cell_center(2, s1), &  
                    qqq1(4), qqq1(2), qqq1(3), aa, bb, cc)
                call dekard_skorost(dev_Gran_center(3, gr), dev_Gran_center(1, gr), dev_Gran_center(2, gr), &  
                    aa, bb, cc, qqq1(4), qqq1(2), qqq1(3))

                call spherical_skorost(dev_Cell_center(3, s1), dev_Cell_center(1, s1), dev_Cell_center(2, s1), &  
                    qqq1(8), qqq1(6), qqq1(7), aa, bb, cc)
                call dekard_skorost(dev_Gran_center(3, gr), dev_Gran_center(1, gr), dev_Gran_center(2, gr), &  
                    aa * rad1**2 / rad2**2, bb * rad1 / rad2, cc * rad1 / rad2, qqq1(8), qqq1(6), qqq1(7))
            else
                call spherical_skorost(dev_Cell_center(1, s1), dev_Cell_center(2, s1), dev_Cell_center(3, s1), &  
                    qqq1(2), qqq1(3), qqq1(4), aa, bb, cc)
                call dekard_skorost(dev_Gran_center(1, gr), dev_Gran_center(2, gr), dev_Gran_center(3, gr), &  
                    aa, bb, cc, qqq1(2), qqq1(3), qqq1(4))

                call spherical_skorost(dev_Cell_center(1, s1), dev_Cell_center(2, s1), dev_Cell_center(3, s1), &  
                    qqq1(6), qqq1(7), qqq1(8), aa, bb, cc)
                call dekard_skorost(dev_Gran_center(1, gr), dev_Gran_center(2, gr), dev_Gran_center(3, gr), &  
                    aa * rad1**2 / rad2**2, bb * rad1 / rad2, cc * rad1 / rad2, qqq1(6), qqq1(7), qqq1(8))
            end if

            rad1 = dev_norm2(dev_Cell_center(:, s2))                              
			rad2 = dev_norm2(dev_Gran_center(:, gr))
			qqq2(1) = qqq2(1) * rad1**2 / rad2**2
			qqq2(5) = qqq2(5) * rad1**(2.0 * ggg) / rad2**(2.0 * ggg)

            if(the > par_pi_8/9 .and. the < 8 * par_pi_8 / 9) then
                call spherical_skorost(dev_Cell_center(3, s2), dev_Cell_center(1, s2), dev_Cell_center(2, s2), &
                    qqq2(4), qqq2(2), qqq2(3), aa, bb, cc)
                call dekard_skorost(dev_Gran_center(3, gr), dev_Gran_center(1, gr), dev_Gran_center(2, gr), &
                    aa, bb, cc, qqq2(4), qqq2(2), qqq2(3))

                call spherical_skorost(dev_Cell_center(3, s2), dev_Cell_center(1, s2), dev_Cell_center(2, s2), &
                    qqq2(8), qqq2(6), qqq2(7), aa, bb, cc)
                call dekard_skorost(dev_Gran_center(3, gr), dev_Gran_center(1, gr), dev_Gran_center(2, gr), &
                    aa * rad1**2 / rad2**2, bb * rad1 / rad2, cc * rad1 / rad2, qqq2(8), qqq2(6), qqq2(7))
            else
                call spherical_skorost(dev_Cell_center(1, s2), dev_Cell_center(2, s2), dev_Cell_center(3, s2), &
                    qqq2(2), qqq2(3), qqq2(4), aa, bb, cc)
                call dekard_skorost(dev_Gran_center(1, gr), dev_Gran_center(2, gr), dev_Gran_center(3, gr), &
                    aa, bb, cc, qqq2(2), qqq2(3), qqq2(4))

                call spherical_skorost(dev_Cell_center(1, s2), dev_Cell_center(2, s2), dev_Cell_center(3, s2), &
                    qqq2(6), qqq2(7), qqq2(8), aa, bb, cc)
                call dekard_skorost(dev_Gran_center(1, gr), dev_Gran_center(2, gr), dev_Gran_center(3, gr), &
                    aa * rad1**2 / rad2**2, bb * rad1 / rad2, cc * rad1 / rad2, qqq2(6), qqq2(7), qqq2(8))
            end if
        end if
    end if

    if(qqq1(1) < 0.00000001 .or. qqq2(1) < 0.000000001) then
        write(*, *) qqq1(1), qqq1(2), qqq1(3), qqq1(4), qqq1(5), qqq1(6), qqq1(7), qqq1(8)
        write(*, *) qqq2(1), qqq2(2), qqq2(3), qqq2(4), qqq2(5), qqq2(6), qqq2(7), qqq2(8)
        STOP
    end if

    wc = 0.0_8
    call chlld(metod, Gran_normal(1), Gran_normal(2), Gran_normal(3), &
	 	wc, qqq1, qqq2, &
         dsl, dsp, dsc,  &
         POTOK, n_disc)


    time = min(time, 0.9 * dist/(max(dabs(dsl), dabs(dsp))+ dabs(wc)) )   ! REDUCTION
	dev_Gran_POTOK(1:dev_num_param, gr) = POTOK * square
	
	dev_Gran_POTOK(dev_num_param + 1, gr) = 0.5 * DOT_PRODUCT(Gran_normal(:), qqq1(6:8) + qqq2(6:8)) * square

    if (.True.) then
        time = atomicmin(time_step2, time)   ! Атомарная операция взятия минимального значения
    end if

end subroutine  CUF_MGD_grans


attributes(global) subroutine CUF_MGD_cells(now)
    use MY_CUDA
    implicit none
	integer, intent(in) :: now

    integer(4) :: gr
	
	integer(4) :: st, s1, s2, i, j, k, zone, now2, ijk
	real(8) :: qqq(dev_num_param)  ! Переменные в ячейке
	real(8) :: dist, QQ3
	real(8) :: POTOK(dev_num_param), vv(3), rr(3), F(3)
	real(8) :: time, Volume, U8, rad1, rad2, aa, bb, cc, Volume2, sks
	real(8) :: ro3, u3, v3, w3, p3, bx3, by3, bz3, Q3
	logical :: l_1
	
	now2 = mod(now, 2) + 1
	gr = blockDim%x * (blockIdx%x - 1) + threadIdx%x   ! Номер потока
	time = time_step

    if (gr > dev_N_cell) return

    POTOK = 0.0
    sks = 0.0
    Volume = dev_Cell_Volume(gr)
    rr = dev_Cell_center(:, gr)
    dist = dev_norm2(rr)

    qqq = dev_Cell_par(:, gr)
    
    vv = qqq(2:4)
    F = 2.0 * qqq(1) * cross_product(vv, rotate_velosity) + &
                qqq(1) * cross_product(rotate_velosity ,cross_product(rr, rotate_velosity))  &
                - qqq(1) * rr * dev_GM / (dist**3)   
    QQ3 = DOT_PRODUCT(F, vv);
    ! F = 0.0_8
    ! QQ3 = 0.0_8


    ! Просуммируем потоки через грани
    do i = 1, 6
        j = dev_Cell_gran(i, gr)
        if (j == 0) CYCLE
        if (j < 0) write(*, *) "ERROR 3876tfghjuyghejk"

        if (dev_Gran_neighbour(1, j) == gr) then
            POTOK = POTOK + dev_Gran_POTOK(1:dev_num_param, j)
            sks = sks + dev_Gran_POTOK(dev_num_param + 1, j)
        else
            POTOK = POTOK - dev_Gran_POTOK(1:dev_num_param, j)
            sks = sks - dev_Gran_POTOK(dev_num_param + 1, j)
        end if
    end do

    ro3 = qqq(1) - time * POTOK(1) / Volume
    
    if (ro3 <= 0.0_8) then
        write(*, *) "Ro < 0  3688"
        write(*, *) " ---  ", ro3, qqq(1), rr(1), rr(2), rr(3)
        ro3 = 0.1
    end if


    u3 = (qqq(1) * qqq(2) - time * (POTOK(2) + (qqq(6)/cpi4) * sks) / Volume + time * F(1)) / ro3
    v3 = (qqq(1) * qqq(3) - time * (POTOK(3) + (qqq(7)/cpi4) * sks) / Volume + time * F(2)) / ro3
    w3 = (qqq(1) * qqq(4) - time * (POTOK(4) + (qqq(8)/cpi4) * sks) / Volume + time * F(3)) / ro3
    
    bx3 = qqq(6) - time * (POTOK(6) + qqq(2) * sks) / Volume
    by3 = qqq(7) - time * (POTOK(7) + qqq(3) * sks) / Volume
    bz3 = qqq(8) - time * (POTOK(8) + qqq(4) * sks) / Volume
    
    p3 = ((  ( qqq(5) / (ggg - 1.0) + 0.5 * qqq(1) * dev_norm2(qqq(2:4))**2 + (qqq(6)**2 + qqq(7)**2 + qqq(8)**2) / 25.13274122871834590768 ) &
        - time * ( POTOK(5) + (DOT_PRODUCT(qqq(2:4), qqq(6:8))/cpi4) * sks)/ Volume  + time * QQ3) - 0.5 * ro3 * (u3**2 + v3**2 + w3**2) - (bx3**2 + by3**2 + bz3**2) / 25.13274122871834590768 ) * (ggg - 1.0)
    
    if (p3 <= 0.0_8) then
        p3 = 0.000001
    end if

    dev_Cell_par(:, gr) = (/ro3, u3, v3, w3, p3, bx3, by3, bz3/)

end subroutine CUF_MGD_cells